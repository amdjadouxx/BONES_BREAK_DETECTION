"""
Application web Streamlit pour la d√©tection de fractures p√©diatriques.
"""

import streamlit as st
import sys
from pathlib import Path
import cv2
import numpy as np
from PIL import Image
import json
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent.parent))

from inference.predict import PediatricFractureDetector
from utils.visualization import MedicalImageVisualizer


# Configuration de la page
st.set_page_config(
    page_title="ü¶¥ D√©tection de Fractures P√©diatriques",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        "Get Help": "https://github.com/votre-repo/issues",
        "Report a bug": "https://github.com/votre-repo/issues",
        "About": "# D√©tecteur de Fractures P√©diatriques\nPowered by YOLOv8",
    },
)

# CSS personnalis√©
st.markdown(
    """
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
</style>
""",
    unsafe_allow_html=True,
)


@st.cache_resource
def load_detector(model_path=None, config_path="config/model_config.yaml"):
    """Charge le d√©tecteur (avec cache pour √©viter le rechargement)."""
    try:
        detector = PediatricFractureDetector(model_path, config_path)
        return detector, None
    except Exception as e:
        return None, str(e)


def display_image_with_detections(image_array, detections, image_name="Image"):
    """Affiche une image avec les d√©tections."""
    if detections:
        # Cr√©er une copie pour dessiner les bounding boxes
        img_with_boxes = image_array.copy()

        # Couleurs pour les classes
        colors = {
            "fracture": (255, 0, 0),  # Rouge
            "normal": (0, 255, 0),  # Vert
        }

        for detection in detections:
            bbox = detection["bbox"]
            confidence = detection["confidence"]
            class_name = detection.get("class_name", "fracture")

            # Coordonn√©es du rectangle
            x1, y1 = int(bbox["x1"]), int(bbox["y1"])
            x2, y2 = int(bbox["x2"]), int(bbox["y2"])

            # Couleur selon la classe
            color = colors.get(class_name, (255, 255, 0))

            # Dessiner le rectangle
            cv2.rectangle(img_with_boxes, (x1, y1), (x2, y2), color, 3)

            # Label avec confiance
            label = f"{class_name}: {confidence:.2f}"

            # Fond pour le texte
            font = cv2.FONT_HERSHEY_SIMPLEX
            font_scale = 0.8
            thickness = 2
            (text_width, text_height), baseline = cv2.getTextSize(
                label, font, font_scale, thickness
            )

            cv2.rectangle(
                img_with_boxes,
                (x1, y1 - text_height - 10),
                (x1 + text_width, y1),
                color,
                -1,
            )

            # Texte
            cv2.putText(
                img_with_boxes,
                label,
                (x1, y1 - 5),
                font,
                font_scale,
                (255, 255, 255),
                thickness,
            )

        return img_with_boxes

    return image_array


def create_detection_summary_chart(detections):
    """Cr√©e un graphique r√©capitulatif des d√©tections."""
    if not detections:
        return None

    # Donn√©es pour les graphiques
    confidences = [d["confidence"] for d in detections]
    classes = [d.get("class_name", "fracture") for d in detections]

    # Cr√©er des sous-graphiques
    fig = make_subplots(
        rows=1,
        cols=2,
        subplot_titles=("Distribution des Confidences", "Classes D√©tect√©es"),
        specs=[[{"type": "histogram"}, {"type": "pie"}]],
    )

    # Histogramme des confidences
    fig.add_trace(
        go.Histogram(x=confidences, nbinsx=10, name="Confiance", showlegend=False),
        row=1,
        col=1,
    )

    # Graphique en camembert des classes
    class_counts = {}
    for cls in classes:
        class_counts[cls] = class_counts.get(cls, 0) + 1

    fig.add_trace(
        go.Pie(
            labels=list(class_counts.keys()),
            values=list(class_counts.values()),
            name="Classes",
            showlegend=True,
        ),
        row=1,
        col=2,
    )

    fig.update_layout(title="R√©sum√© des D√©tections", height=400, showlegend=False)

    return fig


def display_detection_details(detections):
    """Affiche les d√©tails des d√©tections dans un tableau."""
    if not detections:
        st.info("Aucune d√©tection trouv√©e")
        return

    # Pr√©parer les donn√©es pour le tableau
    data = []
    for i, detection in enumerate(detections, 1):
        bbox = detection["bbox"]
        data.append(
            {
                "ID": i,
                "Classe": detection.get("class_name", "fracture"),
                "Confiance": f"{detection['confidence']:.3f}",
                "Confiance %": f"{detection['confidence']*100:.1f}%",
                "Position X": f"{bbox['center_x']:.0f}",
                "Position Y": f"{bbox['center_y']:.0f}",
                "Largeur": f"{bbox['width']:.0f}",
                "Hauteur": f"{bbox['height']:.0f}",
                "Aire": f"{bbox['width'] * bbox['height']:.0f}",
            }
        )

    import pandas as pd

    df = pd.DataFrame(data)

    st.subheader("üìã D√©tails des D√©tections")
    st.dataframe(df, use_container_width=True)

    # M√©triques r√©sum√©es
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üéØ Nombre", len(detections))

    with col2:
        avg_conf = np.mean([d["confidence"] for d in detections])
        st.metric("üìä Confiance Moy.", f"{avg_conf:.3f}")

    with col3:
        high_conf = sum(1 for d in detections if d["confidence"] > 0.7)
        st.metric("üî• Haute Confiance", f"{high_conf}/{len(detections)}")

    with col4:
        total_area = sum(d["bbox"]["width"] * d["bbox"]["height"] for d in detections)
        st.metric("üìê Aire Totale", f"{total_area:.0f} px¬≤")


def main():
    """Fonction principale de l'application."""

    # Header
    st.markdown(
        '<h1 class="main-header">ü¶¥ D√©tecteur de Fractures P√©diatriques</h1>',
        unsafe_allow_html=True,
    )
    st.markdown(
        "**D√©tection automatique de fractures osseuses chez les enfants avec YOLOv8**"
    )

    # Sidebar
    st.sidebar.image(
        "https://via.placeholder.com/300x100/1f77b4/ffffff?text=YOLOv8+Medical",
        use_column_width=True,
    )
    st.sidebar.title("‚öôÔ∏è Configuration")

    # Param√®tres
    confidence_threshold = st.sidebar.slider(
        "üéØ Seuil de Confiance",
        min_value=0.1,
        max_value=1.0,
        value=0.25,
        step=0.05,
        help="Seuil minimum pour consid√©rer une d√©tection",
    )

    model_option = st.sidebar.selectbox(
        "üß† Mod√®le",
        ["Pr√©-entra√Æn√© (YOLOv8n)", "Personnalis√©"],
        help="Choisir le mod√®le √† utiliser",
    )

    custom_model_path = None
    if model_option == "Personnalis√©":
        custom_model_path = st.sidebar.text_input(
            "üìÅ Chemin du Mod√®le",
            placeholder="models/best.pt",
            help="Chemin vers votre mod√®le personnalis√©",
        )

    # Avertissement m√©dical
    st.sidebar.markdown("---")
    st.sidebar.markdown(
        """
    <div class="warning-box">
    ‚ö†Ô∏è <b>AVERTISSEMENT M√âDICAL</b><br>
    Cet outil est une aide au diagnostic. 
    Consultez toujours un professionnel de sant√© qualifi√©.
    </div>
    """,
        unsafe_allow_html=True,
    )

    # Zone principale
    tab1, tab2, tab3 = st.tabs(
        ["üì∏ Analyse d'Image", "üìä Informations Mod√®le", "‚ùì Aide"]
    )

    with tab1:
        st.subheader("üì§ Upload d'Image M√©dicale")

        # Upload de fichier
        uploaded_file = st.file_uploader(
            "Choisissez une radiographie p√©diatrique",
            type=["jpg", "jpeg", "png", "bmp", "tiff"],
            help="Formats support√©s: JPG, PNG, BMP, TIFF",
        )

        if uploaded_file is not None:
            try:
                # Charger le d√©tecteur
                with st.spinner("üîÑ Chargement du mod√®le..."):
                    detector, error = load_detector(
                        model_path=(
                            custom_model_path
                            if model_option == "Personnalis√©"
                            else None
                        )
                    )

                if error:
                    st.error(f"‚ùå Erreur chargement mod√®le: {error}")
                    st.stop()

                # Charger l'image
                image = Image.open(uploaded_file)
                image_array = np.array(image)

                # Convertir en RGB si n√©cessaire
                if len(image_array.shape) == 3 and image_array.shape[2] == 3:
                    image_rgb = cv2.cvtColor(image_array, cv2.COLOR_RGB2BGR)
                else:
                    image_rgb = image_array

                # Affichage en colonnes
                col1, col2 = st.columns([1, 1])

                with col1:
                    st.subheader("üñºÔ∏è Image Originale")
                    st.image(
                        image, caption=f"üìÅ {uploaded_file.name}", use_column_width=True
                    )

                    # Informations de l'image
                    st.write(
                        f"**Dimensions:** {image.size[0]} x {image.size[1]} pixels"
                    )
                    st.write(f"**Taille:** {uploaded_file.size / 1024:.1f} KB")

                # Effectuer la pr√©diction
                with st.spinner("üîç Analyse en cours..."):
                    # Sauvegarder temporairement l'image
                    temp_path = f"temp_{uploaded_file.name}"
                    image.save(temp_path)

                    # Pr√©diction
                    result = detector.predict_single_image(
                        temp_path, confidence=confidence_threshold, save_results=False
                    )

                    # Nettoyer le fichier temporaire
                    Path(temp_path).unlink(missing_ok=True)

                with col2:
                    st.subheader("üéØ R√©sultats de D√©tection")

                    if result["status"] == "success":
                        detections = result["detections"]

                        if detections:
                            # Image avec d√©tections
                            img_with_detections = display_image_with_detections(
                                image_array, detections, uploaded_file.name
                            )
                            st.image(
                                img_with_detections,
                                caption=f"üéØ {len(detections)} fracture(s) d√©tect√©e(s)",
                                use_column_width=True,
                            )

                            # Status de succ√®s
                            st.markdown(
                                f"""
                            <div class="success-box">
                            ‚úÖ <b>Analyse termin√©e avec succ√®s</b><br>
                            {len(detections)} fracture(s) d√©tect√©e(s) avec une confiance ‚â• {confidence_threshold}
                            </div>
                            """,
                                unsafe_allow_html=True,
                            )

                        else:
                            st.image(
                                image,
                                caption="‚úÖ Aucune fracture d√©tect√©e",
                                use_column_width=True,
                            )
                            st.markdown(
                                """
                            <div class="success-box">
                            ‚úÖ <b>Aucune fracture d√©tect√©e</b><br>
                            L'analyse n'a r√©v√©l√© aucune fracture visible avec le seuil de confiance configur√©.
                            </div>
                            """,
                                unsafe_allow_html=True,
                            )

                    else:
                        st.error(
                            f"‚ùå Erreur lors de l'analyse: {result.get('error', 'Inconnue')}"
                        )

                # R√©sultats d√©taill√©s
                if result["status"] == "success" and result["detections"]:
                    st.markdown("---")
                    display_detection_details(result["detections"])

                    # Graphiques
                    chart = create_detection_summary_chart(result["detections"])
                    if chart:
                        st.plotly_chart(chart, use_container_width=True)

                    # Export des r√©sultats
                    st.markdown("---")
                    st.subheader("üíæ Export des R√©sultats")

                    col1, col2, col3 = st.columns(3)

                    with col1:
                        # JSON
                        json_data = {
                            "image_name": uploaded_file.name,
                            "detection_count": len(result["detections"]),
                            "confidence_threshold": confidence_threshold,
                            "detections": result["detections"],
                        }
                        st.download_button(
                            "üìÑ T√©l√©charger JSON",
                            data=json.dumps(json_data, indent=2, ensure_ascii=False),
                            file_name=f"{Path(uploaded_file.name).stem}_results.json",
                            mime="application/json",
                        )

                    with col2:
                        # Rapport texte
                        report = f"""RAPPORT DE D√âTECTION - {uploaded_file.name}
{'='*50}

Nombre de fractures d√©tect√©es: {len(result['detections'])}
Seuil de confiance utilis√©: {confidence_threshold}

D√âTECTIONS:
"""
                        for i, det in enumerate(result["detections"], 1):
                            report += f"""
D√©tection #{i}:
  - Classe: {det['class_name']}
  - Confiance: {det['confidence']:.3f} ({det['confidence']*100:.1f}%)
  - Position: ({det['bbox']['center_x']:.0f}, {det['bbox']['center_y']:.0f})
  - Taille: {det['bbox']['width']:.0f} x {det['bbox']['height']:.0f}
"""

                        st.download_button(
                            "üìù T√©l√©charger Rapport",
                            data=report,
                            file_name=f"{Path(uploaded_file.name).stem}_report.txt",
                            mime="text/plain",
                        )

                    with col3:
                        # Image avec d√©tections
                        if result["detections"]:
                            img_bytes = cv2.imencode(
                                ".jpg",
                                cv2.cvtColor(img_with_detections, cv2.COLOR_RGB2BGR),
                            )[1].tobytes()
                            st.download_button(
                                "üñºÔ∏è T√©l√©charger Image",
                                data=img_bytes,
                                file_name=f"{Path(uploaded_file.name).stem}_detected.jpg",
                                mime="image/jpeg",
                            )

            except Exception as e:
                st.error(f"‚ùå Erreur lors du traitement: {str(e)}")
                st.exception(e)

    with tab2:
        st.subheader("üß† Informations du Mod√®le")

        try:
            detector, error = load_detector(
                model_path=custom_model_path if model_option == "Personnalis√©" else None
            )

            if error:
                st.error(f"‚ùå Erreur: {error}")
            else:
                model_info = detector.get_model_info()

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("### üìã Configuration")
                    st.write(f"**Mod√®le:** {model_info.get('model_name', 'N/A')}")
                    st.write(f"**Device:** {model_info.get('device', 'N/A')}")
                    st.write(
                        f"**Nombre de classes:** {model_info.get('num_classes', 'N/A')}"
                    )
                    st.write(
                        f"**Taille d'entr√©e:** {model_info.get('input_size', 'N/A')}"
                    )

                    if "total_parameters" in model_info:
                        st.write(
                            f"**Param√®tres totaux:** {model_info['total_parameters']:,}"
                        )
                    if "trainable_parameters" in model_info:
                        st.write(
                            f"**Param√®tres entra√Ænables:** {model_info['trainable_parameters']:,}"
                        )

                with col2:
                    st.markdown("### üéØ Classes & Seuils")
                    class_names = model_info.get("class_names", {})
                    for class_id, class_name in class_names.items():
                        st.write(f"**{class_id}:** {class_name}")

                    st.write(
                        f"**Seuil confiance:** {model_info.get('confidence_threshold', 'N/A')}"
                    )
                    st.write(f"**Seuil IoU:** {model_info.get('iou_threshold', 'N/A')}")

                # Performance attendue
                st.markdown("### üìä Performance Attendue")
                performance_data = {
                    "M√©trique": ["Pr√©cision", "Rappel", "F1-Score", "Temps/Image"],
                    "Valeur": ["85-90%", "80-85%", "82-87%", "<100ms (GPU)"],
                }

                import pandas as pd

                df_perf = pd.DataFrame(performance_data)
                st.table(df_perf)

        except Exception as e:
            st.error(f"‚ùå Erreur: {str(e)}")

    with tab3:
        st.subheader("‚ùì Guide d'Utilisation")

        st.markdown(
            """
        ### üöÄ Comment utiliser l'application
        
        1. **üì§ Upload d'Image:** 
           - Cliquez sur "Browse files" dans l'onglet "Analyse d'Image"
           - S√©lectionnez une radiographie p√©diatrique (JPG, PNG, etc.)
           
        2. **‚öôÔ∏è Configuration:**
           - Ajustez le seuil de confiance dans la sidebar
           - Choisissez le mod√®le √† utiliser (pr√©-entra√Æn√© ou personnalis√©)
           
        3. **üîç Analyse:**
           - L'analyse se lance automatiquement apr√®s l'upload
           - Les r√©sultats s'affichent avec les bounding boxes
           
        4. **üíæ Export:**
           - T√©l√©chargez les r√©sultats en JSON, rapport texte, ou image annot√©e
        
        ### üìã Formats d'Images Support√©s
        - JPG/JPEG
        - PNG
        - BMP
        - TIFF
        
        ### üéØ Conseils pour de Meilleurs R√©sultats
        - Utilisez des images de haute qualit√©
        - Assurez-vous que la radiographie est bien orient√©e
        - Ajustez le seuil de confiance selon vos besoins
        - Images recommand√©es: 640x640 pixels ou plus
        
        ### ‚ö†Ô∏è Limitations
        - Outil d'aide au diagnostic uniquement
        - Ne remplace pas l'expertise m√©dicale
        - Performances d√©pendantes de la qualit√© d'image
        - Optimis√© pour radiographies p√©diatriques
        
        ### üìû Support
        - üìß Email: support@fracture-detection.com
        - üêõ Issues: GitHub Repository
        - üìö Documentation: Voir README.md
        """
        )

        # Exemples d'images (placeholder)
        st.markdown("### üì∏ Exemples d'Images")
        col1, col2, col3 = st.columns(3)

        with col1:
            st.image(
                "https://via.placeholder.com/200x200/cccccc/333333?text=Exemple+1",
                caption="Radiographie normale",
            )

        with col2:
            st.image(
                "https://via.placeholder.com/200x200/ffcccc/333333?text=Exemple+2",
                caption="Fracture d√©tect√©e",
            )

        with col3:
            st.image(
                "https://via.placeholder.com/200x200/ccffcc/333333?text=Exemple+3",
                caption="Multiple fractures",
            )

    # Footer
    st.markdown("---")
    st.markdown(
        """
    <div style="text-align: center; color: #666;">
    ü¶¥ <b>Pediatric Fracture Detection v1.0</b> | Powered by YOLOv8 & Streamlit<br>
    ‚ö†Ô∏è Outil d'aide au diagnostic - Consultez toujours un professionnel de sant√©
    </div>
    """,
        unsafe_allow_html=True,
    )


if __name__ == "__main__":
    main()
